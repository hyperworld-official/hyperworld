stages:
  - build
  - push
  - clean
  - run

variables:
  DOCKER_TLS_CERTDIR: "/certs"
  # IMAGE_NAME: "$CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID"
  IMAGE_NAME: "${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}-server-cli:latest"
  CONTAINER_NAME: "${CI_PROJECT_NAME}-server-cli-latest"
  DOCKER_FILE_PATH: ./Dockerfile

build:
  # image:
  #   name: docker:latest
  #   entrypoint: [""]
  stage: build
  when: always
  tags:
    - hyperworld/*
  before_script:
    - docker info
    - pwd
    # - docker images
    - ls "$CI_PROJECT_DIR/"
    - echo $IMAGE_NAME
    - echo "---------> login to docker.io!..."
    - docker login -u $CI_REGISTRY_DOCKER_USER -p $CI_REGISTRY_DOCKER_PWD
  script:
    - echo "building docker image ${IMAGE_NAME}"
    # - echo "remove container ${CONTAINER_NAME}"
    # - docker rm ${IMAGE_NAME}
    # 调用dockerfile编译镜像 t
    # - docker build -f ${DOCKER_FILE_PATH} -t ${IMAGE_NAME} .
  artifacts:
      name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
      untracked: false
      when: on_success
      expire_in: 30 days
      paths:
        # - /opt/appbuild/target/x86_64-unknown-linux-musl/release/hyperauth-server
        - hyperworld-server-cli

# publish stage
pushimage:
  stage: push
  when: manual
  tags: ["hyperworld/*"]
  before_script:
    - echo "---------> login to aliyun!..."
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PWD $CI_REGISTRY
  script:
    - echo "---------> publish to aliyun!..."
    - docker push ${IMAGE_NAME}
    # - docker rmi ${IMAGE_NAME}

run:
  stage: run
  when: manual
  tags:
    - hyperworld/*
  before_script:
    - pwd
    # - docker images
    - ls "$CI_PROJECT_DIR/"
  script:
    - echo "running docker image $IMAGE_NAME"
    # - docker run -p 19253:19253 --name $CONTAINER_NAME -v /Users/lryain/docker-volumes/hyperauth/data:/opt/hyperauth/data -d $IMAGE_NAME
    - docker compose up -d ../server-cli

# before run the image we need to stop and remove previously container
cleanctr:
  when: manual
  stage: clean
  allow_failure: true
  before_script:
    - echo "stop container ${CONTAINER_NAME}"
    - docker stop ${CONTAINER_NAME}
  script:
    - echo "remove container ${CONTAINER_NAME}"
    - docker rm ${CONTAINER_NAME}
